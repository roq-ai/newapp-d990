generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?    @db.VarChar(255)
  date_created DateTime?  @db.Timestamp(6)
  date_updated DateTime?  @db.Timestamp(6)
  name         String     @db.VarChar(255)
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  updated_at   DateTime   @default(now()) @db.Timestamp(6)
  user_id      String     @db.Uuid
  tenant_id    String     @db.VarChar(255)
  user         user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  document     document[]
}

model document {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String    @db.VarChar(255)
  content      String
  date_created DateTime  @db.Timestamp(6)
  date_updated DateTime? @db.Timestamp(6)
  company_id   String    @db.Uuid
  user_id      String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  company      company   @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model permission {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  permission_name String            @db.VarChar(255)
  description     String?           @db.VarChar(255)
  date_created    DateTime          @db.Timestamp(6)
  date_updated    DateTime?         @db.Timestamp(6)
  role_id         String            @db.Uuid
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  role            role              @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role_permission role_permission[]
}

model role {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_name       String            @db.VarChar(255)
  description     String?           @db.VarChar(255)
  date_created    DateTime          @db.Timestamp(6)
  date_updated    DateTime?         @db.Timestamp(6)
  user_id         String            @db.Uuid
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  permission      permission[]
  user            user              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role_permission role_permission[]
}

model role_permission {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_id       String     @db.Uuid
  permission_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role          role       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  company     company[]
  document    document[]
  role        role[]
}
